################# sublime configs #################
{
  "color_scheme": "Packages/User/SublimeLinter/Monokai (SL).tmTheme",
  "folder_exclude_patterns":
  [
    "css",
    "node_modules"
  ],
  "font_size": 13,
  "ignored_packages":
  [
    "Vintage"
  ],
  "scroll_past_end": true,
  "tab_size": 2
}
###################################################

heroku login
heroku help
heroku help apps
heroku apps:create helloworld-treehouse
heroku local
heroku open

package.json (devependencies)
	- mocha for testing
	- uglify-js to minify js files
package.json (scripts)
	- "test": "echo \"ERROR: no test specified\" && exit 1"
	- "test": "mocha" --> runs all the tests defined at mocha with the command: npm test (because test is a built-in task, there's no need to type "node run test")
	- "uglify": "uglifyjs src/model/* src/frontend.js -m -c -o build/apps.js" --> creates the build directory and the app.js files, as a compilation of all the js files
	- "copy-files": "cp src/*.html build/ & cp src/*.css build" --> one & runs both commands in parallel
	- "build": "npm run copy-files && npm run uglify" --> double & runs both commands in sequence

node_modules/.bin/mocha => this command runs mocha (but it can also be run from the scripts object in package.json

node_modules/.bin/uglifyjs src/model/* src/frontend.js -m -c -o build/apps.js
 - (2nd and 3rd params are my js files and directories; -c combines the files in a single file; -m reduces the name of variables; -o output flag with filename)

create javascript files in "strict mode" (by adding: "use strict;" - with quotes or singlequotes) makes the file safer from silent bugs that can be compiled with throwing errors or warning (like, declaring a variable without "var" (or "const" or "let", which now replace the var) compiles without the strict mode, but it's actually not correct)

debug node applications, by going to chrome://flags, enable developer tools experiments, restart chrome and open devtools. Head over to settings-experiments and hit shif key six times
then we can edit package.json file, and add this line to the scripts : "start":"node --inspect ./bin/www" (probably we need the debug dependency?). Typing npm start, will generate a url that we can paste in the browser to start debugging


- after mongodb, I can use a sequelize+sequelite database
- try mocha

- middleware always receives a request/response pair as arguments and ends with a next() function or by sending a response: 
  - send() : sends a response to the client
  - render() : response, when using templates 
  - json() : to send json formatted data
  - ...
- app.use(express.static('public')); => serves the public directory when the root of the site is requested

- you can use error objects to store information when things aren't working right:
const err = new Error("this is an error message");



- the public folder usually stores js,css,images,fonts. the angular files will also come in here
- the src folder contains the server.js and all the other js files 

node -debug src/app.js

- because directives and services can be used in multiple places throughout the application, use this for the core logic of your application, instead of declaring it in multiple controllers
